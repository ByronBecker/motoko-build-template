name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx (optional, but recommended)
        uses: docker/setup-buildx-action@v2

      - name: Build base image
        run: |
          docker compose build base

      - name: Build wasm image
        run: |
          docker compose build wasm

      - name: Run build script inside wasm container and extract hash
        id: build_wasm
        run: |
          # Run docker compose and store the entire output in a variable
          OUTPUT=$(docker compose run --rm wasm)

          echo "===== Docker Compose Output ====="
          echo "$OUTPUT"
          echo "================================="

          # 2) Look for the line with "out/out_Linux_x86_64.wasm" 
          #    e.g. "79b15176dc613860f35867828f40e7d6...  out/out_Linux_x86_64.wasm"
          HASH_LINE=$(echo "$OUTPUT" | grep 'out/out_Linux_x86_64.wasm' || true)

          if [ -z "$HASH_LINE" ]; then
            echo "No line with out/out_Linux_x86_64.wasm found!"
            exit 1
          fi

          # 3) Extract the hash (first space-delimited token)
          DOCKER_HASH=$(echo "$HASH_LINE" | awk '{print $1}')
          echo "docker_hash=$DOCKER_HASH" >> $GITHUB_OUTPUT
      - name: Print build hash
        run: |
          echo "Docker hash: ${{ steps.build_wasm.outputs.docker_hash }}"
  
      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 0.26.0-beta.1
      
      - name: Import the buildtest identity
        run: |
          dfx identity import buildtest ./build-test.pem --disable-encryption --quiet

      - name: Ensure 0 controller and compare hash with dfx canister info
        run: |
          # 1) Set the environment variable to disable the warning
          export DFX_WARNING=-mainnet_plaintext_identity

          # 2) Run `dfx canister --ic info empty`
          INFO=$(dfx canister --ic info empty)

          echo "===== dfx canister --ic info empty ====="
          echo "$INFO"
          echo "========================================"

          # 3) Extract the Controllers line and assert that there are no controllers 
          CONTROLLERS_LINE=$(echo "$INFO" | grep '^Controllers:' || true)

          # In dfx output, if there are zero controllers,
          # the line exists but is empty: "Controllers:"
          # If there is at least one controller, it would look like:
          # "Controllers: r7inp-6aaaa-aaaaa-aaabq-cai"

          # Remove the prefix "Controllers:" plus any leading whitespace after it.
          # That leaves either an empty string (for 0 controllers) or some principal IDs.
          controllers_str=$(echo "$CONTROLLERS_LINE" | sed -E 's/^Controllers:\s*//')

          if [ -n "$controllers_str" ]; then
            echo "ERROR: Found controllers, but expected none."
            echo "Controllers line: $CONTROLLERS_LINE"
            exit 1
          else
            echo "No controllers found. âœ“"
          fi

          # 4) Extract the Module hash line
          MODULE_HASH_LINE=$(echo "$INFO" | grep '^Module hash:' || true)

          # 5) Extract just the hex digest (minus "0x")
          #    Example line: "Module hash: 0xd6129209b5..."
          MODULE_HASH=$(echo "$MODULE_HASH_LINE" | sed -E 's/^Module hash: 0x([A-Za-z0-9]+)/\1/')

          if [ -z "$MODULE_HASH" ]; then
            echo "ERROR: Could not parse Module hash from: $MODULE_HASH_LINE"
            exit 1
          fi

          # 6) Compare with the Docker hash
          DOCKER_HASH="${{ steps.build_wasm.outputs.docker_hash }}"

          echo "Docker hash: $DOCKER_HASH"
          echo "Canister hash: $MODULE_HASH"

          # If you want them to be exactly the same string, do this:
          if [ "$DOCKER_HASH" = "$MODULE_HASH" ]; then
            echo "SUCCESS: Hashes match"
          else
            echo "ERROR: Hash mismatch!"
            exit 1
          fi
      
